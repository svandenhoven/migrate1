---
include:
  - local: .gitlab/ci/*.gitlab-ci.yml

default:
  image: golang:${GO_VERSION}-${DEBIAN_VERSION}
  tags:
    - gitlab-org

stages:
  - lint
  - security
  - test
  - prebuild
  - build
  - deploy

variables:
  # Versions specified here are production versions
  # See also .tool-versions file for development versions
  # See also GO_VERSION declared in .go-matrix-job
  GO_VERSION: "1.22"
  GO_VERSION_PREVIOUS: "1.21"
  GOLANGCI_LINT_VERSION: "1.56.2"
  HUGO_VERSION: "0.124.1"
  LYCHEE_VERSION: "0.14.3"
  NODE_VERSION: "20"
  SHELLCHECK_VERSION: "0.9.0"
  YQ_VERSION: "4"

  # Linux distribution versions
  ALPINE_VERSION: "3.19"
  DEBIAN_VERSION: "bookworm"

  # Other versions
  ASDF_VERSION: "0.13.1"

workflow:
  name: '$DOCS_PROJECT_PIPELINE_TYPE'
  rules:
    # Prevent branch pipelines if an MR is open on the branch.
    - if: $CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /gps/'
      variables:
        DOCS_PROJECT_PIPELINE_TYPE: "MR pipeline (Google): branch $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
        SEARCH_BACKEND: 'google'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        DOCS_PROJECT_PIPELINE_TYPE: "MR pipeline: branch $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
        SEARCH_BACKEND: 'lunr'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $PIPELINE_SCHEDULE_TYPE == "delete_environments"'
      variables:
        DOCS_PROJECT_PIPELINE_TYPE: "Monthly stopped environments cleanup pipeline"
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $PIPELINE_SCHEDULE_TYPE == "chores"'
      variables:
        DOCS_PROJECT_PIPELINE_TYPE: "Cleanup chores pipeline"
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $PIPELINE_SCHEDULE_TYPE == "docker"'
      variables:
        DOCS_PROJECT_PIPELINE_TYPE: "Build docker images pipeline"
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $PIPELINE_SCHEDULE_TYPE == "hourly_deploy"'
      variables:
        DOCS_PROJECT_PIPELINE_TYPE: "Hourly site deployment pipeline"
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      variables:
        DOCS_PROJECT_PIPELINE_TYPE: "Upstream review app pipeline"
        SEARCH_BACKEND: 'lunr'
    # Allow branch pipelines for the default branch and stable branches named XX.X
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      variables:
        DOCS_PROJECT_PIPELINE_TYPE: "Default branch pipeline"
    - if: '$CI_COMMIT_BRANCH =~ /^\d{1,2}\.\d{1,2}$/'
      variables:
        DOCS_PROJECT_PIPELINE_TYPE: "Stable branch pipeline"
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^\d{1,2}\.\d{1,2}$/'
      variables:
        DOCS_PROJECT_PIPELINE_TYPE: "Stable branch pipeline (backport)"

.go-matrix-job:
  parallel:
    matrix:
      # Should match GO_VERSION_PREVIOUS and GO_VERSION variables declared above
      - GO_VERSION: ["1.21", "1.22"]

.yarn_install:
  before_script:
    - node --version
    # https://github.com/nodejs/corepack?tab=readme-ov-file#manual-installs
    - npm uninstall -g yarn pnpm
    - npm install -g corepack@0.24.1
    - corepack enable
    - yarn --version
    - yarn install --immutable

.frontend:
  image: node:${NODE_VERSION}-alpine${ALPINE_VERSION}
  extends:
    - .yarn_install

################################################################################
# Lint jobs
################################################################################

lint:frontend:
  stage: lint
  needs: []
  extends:
    - .frontend
  script:
    - apk add make
    - make lint-frontend

lint:markdown:
  stage: lint
  extends:
    - .frontend
  needs: []
  script:
    - apk add make
    - make lint-markdown

lint:go:
  image: golangci/golangci-lint:v${GOLANGCI_LINT_VERSION}-alpine
  stage: lint
  needs: []
  script:
    - apk add make
    - make lint-go

lint:shell-scripts:
  image: koalaman/shellcheck-alpine:v${SHELLCHECK_VERSION}
  stage: lint
  needs: []
  script:
    - apk add make
    - make lint-shell-scripts

lint:yaml:
  stage: lint
  extends:
    - .frontend
  needs: []
  script:
    - apk add make
    - make lint-yaml

################################################################################
# Test jobs
################################################################################

test:go:
  stage: test
  needs: []
  extends:
    - .go-matrix-job
  script:
    - make go-tests

test:jest:
  stage: test
  needs: []
  extends:
    - .frontend
  script:
    - apk add make
    - make jest-tests

test:markdown-links:
  image:
    name: lycheeverse/lychee:${LYCHEE_VERSION}-alpine
    entrypoint: [""]
  stage: test
  needs: []
  script:
    # See also markdown-link-tests in makefiles/Makefile.tests.mk
    - lychee --offline --include-fragments README.md **/*.md

# Check that asdf/mise dependencies install correctly
test:asdf-installation:
  image: debian:${DEBIAN_VERSION}-slim
  stage: test
  needs: []
  script:
    - apt-get update && apt-get install -y --no-install-recommends curl git jq make python3-pip xz-utils
    - git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v${ASDF_VERSION}
    - source "$HOME/.asdf/asdf.sh"
    # Set PIP_BREAK_SYSTEM_PACKAGES=1 because we mix Debian-installed Python packages and other Python packages.
    - PIP_BREAK_SYSTEM_PACKAGES=1 make install-dependencies
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - .tool-versions

# Check docs content for Kramdown syntax
# This can be removed after we've completed the migration to Hugo
test:kramdown-audit:
  image: hugomods/hugo:exts-${HUGO_VERSION}
  stage: test
  needs: []
  allow_failure: true
  script:
    - apk update && apk upgrade
    - apk add --no-cache yq=~${YQ_VERSION} curl coreutils make bash gcc libc-dev
    - make kramdown-audit

################################################################################
# Build jobs
################################################################################

prebuild:compile_frontend:
  stage: prebuild
  needs: []
  extends:
    - .frontend
  script:
    - yarn build
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - .yarn/cache
  artifacts:
    paths:
      - themes/gitlab-docs/static/vite/
      - themes/gitlab-docs/static/gitlab_ui/
      - themes/gitlab-docs/static/icons.svg
      - data/icons.json
    expire_in: 1d

build:compile_site:
  image: hugomods/hugo:exts-${HUGO_VERSION}
  stage: build
  extends:
    - .yarn_install
  script:
    # Install additional dependencies
    - apk update && apk upgrade
    - apk add --no-cache yq=~${YQ_VERSION} curl coreutils make bash gcc libc-dev
    # Print Hugo environment info
    - hugo env
    # Fetch docs content
    - make clone-docs-projects
    # Compile the site
    - hugo --gc --minify
  after_script:
    # Compress files with gzip
    - find public -type f -regex '.*\.\(css\|html\|js\|txt\|xml\)$' -exec gzip -f -k {} \;
    # Print the final size of the public directory
    - SIZE_AFTER_COMPRESS=$(du -sh public/ | awk '{print $1}')
    - echo -e "Size after adding compressed versions ..... $SIZE_AFTER_COMPRESS"
  dependencies:
    - prebuild:compile_frontend
  artifacts:
    paths:
      - public
    expire_in: 1d

pages:
  stage: deploy
  script:
    - echo "Pages accessible through ${CI_PAGES_URL}"
  dependencies:
    - build:compile_site
  artifacts:
    paths:
      - public
    expire_in: 1d
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
