---
default:
  image: golang:${GO_VERSION}-${DEBIAN_VERSION}
  tags:
    - gitlab-org

stages:
  - lint
  - test
  - prebuild
  - build
  - deploy
  - cleanup

variables:
  # Versions specified here are production versions
  # See also .tool-versions file for development versions
  # See also GO_VERSION declared in .go-matrix-job
  GO_VERSION: "1.21"
  GO_VERSION_PREVIOUS: "1.20"
  GOLANGCI_LINT_VERSION: "1.55.2"
  HUGO_VERSION: "0.122.0"
  NODE_VERSION: "20"
  SHELLCHECK_VERSION: "0.9.0"
  YAMLLINT_VERSION: "1.33.0"
  YQ_VERSION: "4"

  # Linux distribution versions
  ALPINE_VERSION: "3.19"
  DEBIAN_VERSION: "bookworm"

  # Other versions
  ASDF_VERSION: "0.13.1"

workflow:
  rules: &workflow_rules
    # For merge requests, create a pipeline
    - if: '$CI_MERGE_REQUEST_IID'
    # For 'main' branch, create a pipeline, including on schedules, pushes, and, merges)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # For tags, create a pipeline
    - if: '$CI_COMMIT_TAG'

.go-matrix-job:
  parallel:
    matrix:
      # Should match GO_VERSION_PREVIOUS and GO_VERSION variables declared above
      - GO_VERSION: ["1.20", "1.21"]

.yarn:
  image: node:${NODE_VERSION}-alpine${ALPINE_VERSION}
  before_script:
    - node --version
    - corepack enable
    - yarn --version
    - yarn install --immutable

################################################################################
# Lint jobs
################################################################################

lint:frontend:
  stage: lint
  needs: []
  extends:
    - .yarn
  script:
    - apk add make
    - make lint-frontend

lint:markdown:
  stage: lint
  extends:
    - .yarn
  needs: []
  script:
    - apk add make
    - make lint-markdown

lint:go:
  image: golangci/golangci-lint:v${GOLANGCI_LINT_VERSION}-alpine
  stage: lint
  needs: []
  script:
    - apk add make
    - make lint-go

lint:shell-scripts:
  image: koalaman/shellcheck-alpine:v${SHELLCHECK_VERSION}
  stage: lint
  needs: []
  script:
    - apk add make
    - make lint-shell-scripts

lint:yaml:
  image: python:alpine${ALPINE_VERSION}
  stage: lint
  needs: []
  script:
    - pip install yamllint==${YAMLLINT_VERSION}
    - apk add make
    - make lint-yaml

################################################################################
# Test jobs
################################################################################

test:go:
  stage: test
  needs: []
  extends:
    - .go-matrix-job
  script:
    - make go-tests

test:jest:
  stage: test
  needs: []
  extends:
    - .yarn
  script:
    - apk add make
    - make jest-tests

# Check that asdf/mise dependencies install correctly
test:asdf_installation:
  image: debian:${DEBIAN_VERSION}-slim
  stage: test
  needs: []
  script:
    - apt-get update && apt-get install -y --no-install-recommends curl git jq make python3-pip xz-utils
    - git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v${ASDF_VERSION}
    - source "$HOME/.asdf/asdf.sh"
    # Set PIP_BREAK_SYSTEM_PACKAGES=1 because we mix Debian-installed Python packages and other Python packages.
    - PIP_BREAK_SYSTEM_PACKAGES=1 make install-dependencies
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - .tool-versions

################################################################################
# Build jobs
################################################################################

prebuild:compile_frontend:
  stage: prebuild
  needs: []
  extends:
    - .yarn
  script:
    - yarn build
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - .yarn/cache
  artifacts:
    paths:
      - themes/gitlab-docs/static/vite/
      - themes/gitlab-docs/static/gitlab_ui/
      - node_modules/
    expire_in: 1d

build:compile_site:
  image: registry.gitlab.com/pages/hugo/hugo_extended:${HUGO_VERSION}
  stage: build
  before_script:
    # Install additional dependencies
    - apk update && apk upgrade
    - apk add --no-cache go=~${GO_VERSION} yq=~${YQ_VERSION} npm curl coreutils make bash
    # Install PostCSS tools for https://gohugo.io/hugo-pipes/postcss/
    - npm i -g postcss postcss-cli autoprefixer
    # Print Hugo environment info
    - hugo env
    # Fetch docs content
    - make clone-docs-projects
  script:
    # Compile the site
    - hugo --gc --minify
  after_script:
    # Compress files with gzip
    - find public -type f -regex '.*\.\(css\|html\|js\|txt\|xml\)$' -exec gzip -f -k {} \;
    # Print the final size of the public directory
    - SIZE_AFTER_COMPRESS=$(du -sh public/ | awk '{print $1}')
    - echo -e "Size after adding compressed versions ..... $SIZE_AFTER_COMPRESS"
  dependencies:
    - prebuild:compile_frontend
  artifacts:
    paths:
      - public
    expire_in: 1d

pages:
  stage: deploy
  script:
    - echo "Pages accessible through ${CI_PAGES_URL}"
  dependencies:
    - build:compile_site
  artifacts:
    paths:
      - public
    expire_in: 1d
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

review_app:
  extends:
    - build:compile_site
  stage: deploy
  script:
    - hugo --gc --minify --environment review
  rules:
    - if: $CI_MERGE_REQUEST_IID
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    # There is no predefined CI variable that is formatted quite right
    # neither $CI_PAGES_URL nor $CI_JOB_URL have /-/ directly after the hostname
    url: https://gitlab-org.gitlab.io/-/technical-writing-group/gitlab-docs-hugo/-/jobs/$CI_JOB_ID/artifacts/public/index.html
    on_stop: stop_review_app
  variables:
    HUGO_BASEURL: https://gitlab-org.gitlab.io/-/technical-writing-group/gitlab-docs-hugo/-/jobs/$CI_JOB_ID/artifacts/public

stop_review_app:
  image: busybox
  stage: cleanup
  script:
    - echo "stop review app"
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: manual
      allow_failure: true
  variables:
    GIT_STRATEGY: none
