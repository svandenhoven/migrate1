---
default:
  image: golang:${GO_VERSION}-${DEBIAN_VERSION}
  tags:
    - gitlab-org

stages:
  - lint
  - test
  - prebuild
  - build

variables:
  # Versions specified here are production versions
  # See also .tool-versions file for development versions
  # See also GO_VERSION declared in .go-matrix-job
  GO_VERSION: "1.21"
  GO_VERSION_PREVIOUS: "1.20"
  GOLANGCI_LINT_VERSION: "1.55.2"
  HUGO_VERSION: "0.121.1"
  NODE_VERSION: "20"
  SHELLCHECK_VERSION: "0.9.0"
  YAMLLINT_VERSION: "1.33.0"
  YQ_VERSION: "4.40.5"

  # Linux distribution versions
  ALPINE_VERSION: "3.19"
  DEBIAN_VERSION: "bookworm"

workflow:
  rules: &workflow_rules
    # For merge requests, create a pipeline
    - if: '$CI_MERGE_REQUEST_IID'
    # For 'main' branch, create a pipeline, including on schedules, pushes, and, merges)
    - if: '$CI_COMMIT_BRANCH == "main"'
    # For tags, create a pipeline
    - if: '$CI_COMMIT_TAG'

.go-matrix-job:
  parallel:
    matrix:
      # Should match GO_VERSION_PREVIOUS and GO_VERSION variables declared above
      - GO_VERSION: ["1.20", "1.21"]

.yarn:
  image: node:${NODE_VERSION}-${DEBIAN_VERSION}
  before_script:
    - node --version
    - corepack enable
    - yarn --version
    - yarn install --immutable

################################################################################
# Lint jobs
################################################################################

lint:frontend:
  stage: lint
  needs: []
  extends:
    - .yarn
  script:
    - make lint-frontend

lint:go:
  image: golangci/golangci-lint:v${GOLANGCI_LINT_VERSION}-alpine
  stage: lint
  needs: []
  script:
    - apk add make
    - make lint-go

lint:shell-scripts:
  image: koalaman/shellcheck-alpine:v${SHELLCHECK_VERSION}
  stage: lint
  needs: []
  script:
    - apk add make
    - make lint-shell-scripts

lint:yaml:
  image: python:alpine${ALPINE_VERSION}
  stage: lint
  needs: []
  script:
    - pip install yamllint==${YAMLLINT_VERSION}
    - apk add make
    - make lint-yaml

################################################################################
# Test jobs
################################################################################

test:go:
  stage: test
  needs: []
  extends:
    - .go-matrix-job
  script:
    - make go-tests

test:jest:
  stage: test
  needs: []
  extends:
    - .yarn
  script:
    - make jest-tests

################################################################################
# Build jobs
################################################################################

prebuild:compile_frontend:
  stage: prebuild
  needs: []
  extends:
    - .yarn
  script:
    - yarn build
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - .yarn/cache
  artifacts:
    paths:
      - themes/gitlab-docs/static/js/
    expire_in: 1d

build:compile_site:
  stage: build
  script:
    # Install yq
    - curl --output /usr/local/bin/yq --location https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64
    - chmod +x /usr/local/bin/yq
    - yq --version
    # Install Hugo
    - curl --output hugo_extended_${HUGO_VERSION}_linux-amd64.deb --location https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb
    - dpkg --install hugo_extended_${HUGO_VERSION}_linux-amd64.deb
    # Print Hugo environment info
    - hugo env
    # Fetch docs content
    - make clone-docs-projects
    # Compile the site
    - hugo --gc --minify
    # Compress files with gzip
    - find public -type f -regex '.*\.\(css\|html\|js\|txt\|xml\)$' -exec gzip -f -k {} \;
    # Print the final size of the public directory
    - SIZE_AFTER_COMPRESS=$(du -sh public/ | awk '{print $1}')
    - echo -e "Size after adding compressed versions ..... $SIZE_AFTER_COMPRESS"
  dependencies:
    - prebuild:compile_frontend
  artifacts:
    paths:
      - public
    expire_in: 1d
